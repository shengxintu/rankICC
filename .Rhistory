outer_lte <- function(a, b, tol = 1e-7) {
m1 <- outer(a, b, `-`)
isEq <- abs(m1) < tol
isLT <- (!isEq & m1 < 0)
list(isEq, isLT)
}
save(outer_lte, file="outer_lte.R")
outer_lte <- function(a, b, tol = 1e-7) {
#hhhh
m1 <- outer(a, b, `-`)
isEq <- abs(m1) < tol
isLT <- (!isEq & m1 < 0)
list(isEq, isLT)
}
save(outer_lte, file="outer_lte.R")
document
document()
install.packages("roxygen2")
library(roxygen2)
document()
?`roxygen2-package`
roxygen2-package
vignette("namespace", package = "roxygen2")
devtools::document()
devtools::document()
library(RICC)
?RICC
??RICC
?RICC2levels
?RICCklevels
library(RICC)
?RICCklevels
RICC2levels()
RICC2levels
#######A function to generate data
generate.data <- function(seed=1234, n=30, cluster.limit=c(10,10), mu=1, vu=1,vr=1, hlf=F){
if(seed) {set.seed(seed)}
#cluster size
if(hlf) size.cluster <- rep(cluster.limit, each = n/2)
else{
if(cluster.limit[1] == cluster.limit[2]){
size.cluster <- rep(cluster.limit[1], n)
}else size.cluster <- sample(cluster.limit[1]:cluster.limit[2], n, replace = TRUE)
}
#generate data for each cluster
x <- NULL
cluster <- NULL
id <- NULL
#generate cluster means
u <- rnorm(n, mean = mu, sd = sqrt(vu))
for(i in 1:n){
n.cluster <- size.cluster[i]
r <- rnorm(n.cluster, mean = 0, sd = sqrt(vr))
x <- c(x, r+u[i])
cluster <- c(cluster, rep(i, n.cluster))
id <- c(id, 1:n.cluster)
}
#format output
dat <- data.frame("x"=x,
"cluster"=as.factor(cluster),
"id"=as.factor(id))
return(dat)
}
generate.data.multi <- function(seed=1234, n1=c(10,10), n2=c(10,10), n3=30, mu=1, v1=1, v2=1, v3=1){
set.seed(seed)
#cluster size
if(n2[1] == n2[2]){
size <- rep(n2[1], n3)
}else size <- replicate(n3, sample(n2[1]:n2[2], 1))
u <- rnorm(n3, mean = mu, sd = sqrt(v3))
dat <- list()
for(i in 1:n3){
dsub <- generate.data(seed = FALSE, n=size[i], cluster.limit=n1, mu=u[i], vu=v2, vr=v1, hlf=F)
colnames(dsub)[2] <- "level2"
dsub$level3 <- i
dat[[i]] <- dsub
}
dat <- do.call(rbind, dat)
dat$level3 <- as.factor(dat$level3)
return(dat)
}
generate.data.multi()
d <- generate.data.multi()
generate.data <- function(n=30, cluster.limit=c(10,10), mu=1, vu=1,vr=1, hlf=F){
#if(seed) {set.seed(seed)}
#cluster size
if(hlf) size.cluster <- rep(cluster.limit, each = n/2)
else{
if(cluster.limit[1] == cluster.limit[2]){
size.cluster <- rep(cluster.limit[1], n)
}else size.cluster <- sample(cluster.limit[1]:cluster.limit[2], n, replace = TRUE)
}
#generate data for each cluster
x <- NULL
cluster <- NULL
id <- NULL
#generate cluster means
u <- rnorm(n, mean = mu, sd = sqrt(vu))
for(i in 1:n){
n.cluster <- size.cluster[i]
r <- rnorm(n.cluster, mean = 0, sd = sqrt(vr))
x <- c(x, r+u[i])
cluster <- c(cluster, rep(i, n.cluster))
id <- c(id, 1:n.cluster)
}
#format output
dat <- data.frame("x"=x,
"cluster"=as.factor(cluster),
"id"=as.factor(id))
return(dat)
}
dd <- generate.data.multi()
generate.data.multi <- function(seed=1234, n1=c(10,10), n2=c(10,10), n3=30, mu=1, v1=1, v2=1, v3=1){
set.seed(seed)
#cluster size
if(n2[1] == n2[2]){
size <- rep(n2[1], n3)
}else size <- replicate(n3, sample(n2[1]:n2[2], 1))
u <- rnorm(n3, mean = mu, sd = sqrt(v3))
dat <- list()
for(i in 1:n3){
dsub <- generate.data(n=size[i], cluster.limit=n1, mu=u[i], vu=v2, vr=v1, hlf=F)
colnames(dsub)[2] <- "level2"
dsub$level3 <- i
dat[[i]] <- dsub
}
dat <- do.call(rbind, dat)
dat$level3 <- as.factor(dat$level3)
return(dat)
}
dd <- generate.data.multi()
sum(d$x == dd$x)
dim(x)
dim(dat)
dim(d)
generate.data <- function(seed=1234, n=30, cluster.limit=c(10,10), mu=1, vu=1,vr=1, hlf=F){
if(seed) {set.seed(seed)}
#cluster size
if(hlf) size.cluster <- rep(cluster.limit, each = n/2)
else{
if(cluster.limit[1] == cluster.limit[2]){
size.cluster <- rep(cluster.limit[1], n)
}else size.cluster <- sample(cluster.limit[1]:cluster.limit[2], n, replace = TRUE)
}
#generate data for each cluster
x <- NULL
cluster <- NULL
id <- NULL
#generate cluster means
u <- rnorm(n, mean = mu, sd = sqrt(vu))
for(i in 1:n){
n.cluster <- size.cluster[i]
r <- rnorm(n.cluster, mean = 0, sd = sqrt(vr))
x <- c(x, r+u[i])
cluster <- c(cluster, rep(i, n.cluster))
id <- c(id, 1:n.cluster)
}
#format output
dat <- data.frame("x"=x,
"cluster"=as.factor(cluster),
"id"=as.factor(id))
return(dat)
}
generate.data.multi <- function(seed=1234, n1=c(10,10), n2=c(10,10), n3=30, mu=1, v1=1, v2=1, v3=1){
set.seed(seed)
#cluster size
if(n2[1] == n2[2]){
size <- rep(n2[1], n3)
}else size <- replicate(n3, sample(n2[1]:n2[2], 1))
u <- rnorm(n3, mean = mu, sd = sqrt(v3))
dat <- list()
for(i in 1:n3){
dsub <- generate.data(seed = FALSE, n=size[i], cluster.limit=n1, mu=u[i], vu=v2, vr=v1, hlf=F)
colnames(dsub)[2] <- "level2"
dsub$level3 <- i
dat[[i]] <- dsub
}
dat <- do.call(rbind, dat)
dat$level3 <- as.factor(dat$level3)
return(dat)
}
d <- generate.data()
RICC2levels(d$x, d$cluster,0)
sample(1:6)
dd <- d[sample(1:nrow(d)),]
RICC2levels(dd$x, dd$cluster,0)
dd$x[1:4]
d$x[1:4]
d <- generate.data.multi()
RICCklevels(d$x,d$level2,d$level3)
warnings
warnings()
rep_n <- 5
1:rep_n
roxygen2::roxygenise()
roxygen2::roxygenise()
?lm
roxygen2::roxygenise()
roxygen2::roxygenise()
?qnorm
?sd
?model.extract
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
?list
roxygen2::roxygenise()
library(RICC)
remove.packages("RICC")
roxygen2::roxygenise()
?unlist
roxygen2::roxygenise().
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise().
roxygen2::roxygenise()
library(rankICC)
remove.packages("rankICC")
roxygen2::roxygenise()
library(rankICC)
library(rankICC)
rankICC2levels()
rankICC2levels
rankICC3levels()
rankICC3levels
library(rankICC)
library(rankICC)
?cor
?cor
?cor
?lm
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
library(rankICC)
library(rankICC)
remove.packages("rankICC")
roxygen2::roxygenise()
library(rankICC)
rankICC2levels()
?rankICC2levels
?rankICC3levels
roxygen2::roxygenise()
library(rankICC)
rankICC2levels()
?rankICC2levels
?rankICC3levels
roxygen2::roxygenise()
library(rankICC)
?rankICC3levels
roxygen2::roxygenise()
library(rankICC)
?rankICC3levels
?rankICC2levels
roxygen2::roxygenise()
library(rankICC)
?rankICC2levels
?rankICC3levels
roxygen2::roxygenise()
library(rankICC)
output <- rep(NA, 4)
names(output) <- c("rankICC", "SE", "Lower", "Upper")
output
output["rankICC"]
output["rankICC"] <- 2
output["Lower"] <- 4
output
0.5+0.95/2
output
output[c("SE","Lower")] <- c(2,5)
output
?lm
?rms::Glm
?cor
?rms::Glm
?solve
?corr
?cor
?var
?lm
?cor
?lm
?glm
roxygen2::roxygenise()
library(rankICC)
?rankICC::rankICC2levels
roxygen2::roxygenise()
library(rankICC)
?rankICC::rankICC
?lm
?cor
?rms::Glm
?quantile
roxygen2::roxygenise()
library(rankICC)
?rankICC::rankICC
roxygen2::roxygenise()
library(rankICC)
?rankICC::rankICC
roxygen2::roxygenise()
library(rankICC)
?rankICC::rankICC
?cov
roxygen2::roxygenise()
roxygen2::roxygenise()
library(rankICC)
?rankICC3levels
roxygen2::roxygenise()
library(rankICC)
roxygen2::roxygenise()
library(rankICC)
